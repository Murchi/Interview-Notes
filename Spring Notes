Goals of spring :
    Lightweight development with java POJO
    Dependency Injection to promote loose coupling
    Declarative Programming with AOP
    minimize boilerplate java code
    
    
AOP(Aspect oriented Programming) :
    Add functionality to objects declaratively.
    Logging, security,transactions etc.
   
ORM (Object Relational Mapping) :
    Integration with Hibernate and JPA
    
    
 Primary Functions of spring container :
 Inversion of Control : create and manage object
 Inject object's dependencies (Dependency injection)
 
 Ways to configure Spring container :
 
 XML configuration
 Annotations
 Java source code.
 
 Spring Development Process :
 
 1. Configure Spring beans
 2. Create the spring container
 3.Retrieve beans from spring container
 
 ApplicationContext = spring container
 Spring bean = java object created by  Spring container
 
 Dependency injection : Constructor injection
 Setter injection : Injects dependency by calling setter methods in the class
 in setter injection when configuring the dependency in xml, tag property should contain the name of the setter method without "set" word 
 and converting the fisrt letter after "set" word to lowercase
 eg : setter method = "setDataprocessed" property name = "dataprocessed"
 
  
  
  Injecting Literal Values :
  <property name="emailAddress" value="thebestcoach@luv2code.com" />
        <property name="team" value="Sunrisers Hyderabad" />
        setter method  : setEmailAddress()
   Injecting values from Property File :
        instead of hardcoading the values in xml , we can add the same in property file and retrieve the same in xml file
        
        
    Bean Scopes : 
        1. singleton (default)
        2.prototype
        3.
        
     Bean LifeCycles :
        1. Container started
        2. Bean Instantiated
        3. Dependencies Injected
        4. Internal Spring Processing
        5. Your custom Init method
        6. Bean is ready for use
        7. Container is shutdown
        8. Your custom destroy method
        
        
        Configure Spring with Java Annotations :
            Annotations : Special marker / label added to the java class
                          Provide meta data about the class
                          Processed at compile time or run time
                          
                          
                         a. @Component
                         b. @Override
                         
                         
            Spring dependency injection using annotations and autowiring
            Autowiring : For dependency injection, spring can use autowiring
                          Spring wil look for a class, that matches the property :
                                :matches by type : class or interface
                           Spring will inject it automatically , hence autowired
                           Autowiring injection type :
                            Constructor injection
                             Setter injection
                              Field injection
            Whenever Spring sees @Autowired annotation, it checks for the concerned bean to be injected, and automaically loads the same.
            If there are multiple beans for the same configuration, @Qualifier is used.
            
